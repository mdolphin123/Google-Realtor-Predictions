# -*- coding: utf-8 -*-
"""Future Time Prediction Notebook

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eIh0rFZIQsNcALKdRDXEQ1rTMwM_hSah
"""

import pandas as pd
from enum import StrEnum
import datetime
import numpy as np
VC = {27712: 29.4, 27703: 49.7, 27701: 70.2, 27707: 53.5, 27713: 39.5, 27704: 61.4, 27705: 47.4, 27503: 36.9, 27709: 23.4, 27278: 30.3}
PC = {27712: 40.8, 27703: 64.4, 27701: 78.2, 27707: 67.8, 27713: 58.3, 27704: 72.4, 27705: 63.7, 27503: 46.2, 27709: 31.9, 27278: 40}
beds = float("2.0")
baths = float("2.5")
square_feet = float("1746.0")
lot_size = float("7405.0")
year_built = int(float("2024.0"))
property_type = "single family"
latitude = float("36.005418")
longitude = float("-78.860207")
zipcode = int(float("27704.0"))

vc_rate = VC[int(zipcode)]
pc_rate = PC[int(zipcode)]
house_age = 2025 - year_built

class PropertyType(StrEnum):
  CONDO = "condo"
  MOBILE = "mobile"
  SMALL_MF = "small multi family"
  BIG_MF = "big multi family"
  RANCH = "ranch"
  SF = "single family"
  TOWNHOUSE = "townhouse"




ptype = PropertyType(property_type)

data = {'BEDS': [beds], 'BATHS': [baths], 'SQUARE FEET': [square_feet], 'LOT SIZE': [lot_size], 'YEAR BUILT': [year_built], 'LATITUDE': [latitude], 'LONGITUDE': [longitude],
                'PROPERTY TYPE_Condo/Co-op': [0], 'PROPERTY TYPE_Mobile/Manufactured Home': [0], 'PROPERTY TYPE_Multi-Family (2-4 Unit)': [0],
                'PROPERTY TYPE_Multi-Family (5+ Unit)': [0], 'PROPERTY TYPE_Ranch': [0], 'PROPERTY TYPE_Single Family Residential': [0], 'PROPERTY TYPE_Townhouse': [0],
                'PROPERTY_CRIME': [pc_rate], 'VIOLENT_CRIME': [vc_rate], 'YEAR': [2025], 'MONTH': [5], 'HOUSE AGE': [house_age]}

match ptype:
    case PropertyType.CONDO:
      data['PROPERTY TYPE_Condo/Co-op'][0] = 1
    case PropertyType.MOBILE:
      data['PROPERTY TYPE_Mobile/Manufactured Home'][0] = 1
    case PropertyType.SMALL_MF:
      data['PROPERTY TYPE_Multi-Family (2-4 Unit)'][0] = 1
    case PropertyType.BIG_MF:
      data['PROPERTY TYPE_Multi-Family (5+ Unit)'][0] = 1
    case PropertyType.RANCH:
      data['PROPERTY TYPE_Ranch'][0] = 1
    case PropertyType.SF:
      data['PROPERTY TYPE_Single Family Residential'][0] = 1
    case PropertyType.TOWNHOUSE:
      data['PROPERTY TYPE_Townhouse'][0] = 1

df = pd.DataFrame(data)
df.head(1)

import pickle
model = pickle.load(open('/content/sample_data/model.pkl', 'rb'))

prediction = model.predict(df)

print(prediction)
print(prediction[0])


temp = []
for i in range(2020, 2025):
  df['YEAR'] = i
  temp.append(model.predict(df)[0])

print(type(temp))

import matplotlib.pyplot as plt
x_axis = np.arange(2020, 2025)
plt.plot(x_axis, temp)

"""**27704**"""

import matplotlib.pyplot as plt



df_time = pd.read_csv('/content/sample_data/zipcode_saleprice (1).csv')
df_time = df_time.drop(['RegionID', 'SizeRank', 'RegionType', 'StateName', 'State', 'City', 'Metro', 'CountyName'], axis = 1)
df_time = df_time.rename(columns = {'RegionName': 'ZIP OR POSTAL CODE'})
df_time.head(5)


temp_27703 = df_time.loc[0, '2002-01-01':]
temp_27713 = df_time.loc[1, '2002-01-01':]
temp_27707 = df_time.loc[2, '2002-01-01':]
temp_27705 = df_time.loc[3, '2002-01-01':]
temp_27704 = df_time.loc[4, '2002-01-01':]
temp_27701 = df_time.loc[5, '2002-01-01':]
temp_27712 = df_time.loc[6, '2002-01-01':]
temp_27503 = df_time.loc[7, '2002-01-01':]

temp_extra = df_time.loc[7, '2020-01-01':]



map_27703 = {temp_27703.keys: temp_27703.values}
map_27713 = {temp_27713.keys: temp_27713.values}
map_27707 = {temp_27707.keys: temp_27707.values}
map_27705 = {temp_27705.keys: temp_27705.values}
map_27704 = {temp_27704.keys: temp_27704.values}
map_27701 = {temp_27701.keys: temp_27701.values}
map_27712 = {temp_27712.keys: temp_27712.values}
map_27503 = {temp_27503.keys: temp_27503.values}




x_axis = pd.date_range(start='2002-01-01', end='2025-05-01', freq='M')
x_extra = pd.date_range(start='2020-01-01', end='2025-05-01', freq='M')
print(x_axis.shape)
#plt.plot(x_axis, temp_27703, label = '27703')
#plt.plot(x_axis, temp_27713, label = '27713')
#plt.plot(x_axis, temp_27707, label = '27707')
#plt.plot(x_axis, temp_27705, label = '27705')
#plt.plot(x_axis, temp_27704, label = '27704')plt.plot(x_axis, temp_27701, label = '27701')
#plt.plot(x_axis, temp_27712, label = '27712')
#plt.plot(x_axis, temp_27503, label = '27503')
plt.plot(x_extra, temp_extra, label = '27503')
plt.legend()
plt.axis()
plt.xlabel("Year")
plt.ylabel("Median Home Sale Price")
plt.title("Year vs. Median Home Sale Price Based for Zipcode 27503")
plt.grid()
plt.show()

m1 = auto_arima(temp_27704, stepwise = True, error_action='ignore', seasonal=True, m=12)
df1 = m1.predict(n_periods = 12)
temp1 = pd.concat([temp_27704, df1])


m2 = auto_arima(temp1, stepwise = True, error_action='ignore', seasonal=True, m=12)
df2 = m2.predict(n_periods = 12)
temp2 = pd.concat([temp1, df2])

m3 = auto_arima(temp2, stepwise = True, error_action='ignore', seasonal=True, m=12)
df3 = m3.predict(n_periods = 12)
temp3 = pd.concat([temp2, df3])

m4 = auto_arima(temp3, stepwise = True, error_action='ignore', seasonal=True, m=12)
df4 = m4.predict(n_periods = 12)
temp4 = pd.concat([temp3, df4])

m5 = auto_arima(temp4, stepwise = True, error_action='ignore', seasonal=True, m=12)
df5 = m5.predict(n_periods = 12)
temp5 = pd.concat([temp4, df5])

print(len(temp5))

import pickle
full_path = '/content/27704.pkl'

with open(full_path, 'wb') as file:
  pickle.dump(m5, file)

"""**27703**"""

m1 = auto_arima(temp_27703, stepwise = True, error_action='ignore', seasonal=True, m=12)
df1 = m1.predict(n_periods = 12)
temp1 = pd.concat([temp_27703, df1])


m2 = auto_arima(temp1, stepwise = True, error_action='ignore', seasonal=True, m=12)
df2 = m2.predict(n_periods = 12)
temp2 = pd.concat([temp1, df2])

m3 = auto_arima(temp2, stepwise = True, error_action='ignore', seasonal=True, m=12)
df3 = m3.predict(n_periods = 12)
temp3 = pd.concat([temp2, df3])

m4 = auto_arima(temp3, stepwise = True, error_action='ignore', seasonal=True, m=12)
df4 = m4.predict(n_periods = 12)
temp4 = pd.concat([temp3, df4])

m5 = auto_arima(temp4, stepwise = True, error_action='ignore', seasonal=True, m=12)
df5 = m5.predict(n_periods = 12)
temp5 = pd.concat([temp4, df5])

print(len(temp5))

x_axis = np.arange(340)
plt.plot(x_axis, temp5)

full_path = '/content/27703.pkl'

with open(full_path, 'wb') as file:
  pickle.dump(m5, file)

"""**27707**"""

m1 = auto_arima(temp_27707, stepwise = True, error_action='ignore', seasonal=True, m=12)
df1 = m1.predict(n_periods = 12)
temp1 = pd.concat([temp_27707, df1])


m2 = auto_arima(temp1, stepwise = True, error_action='ignore', seasonal=True, m=12)
df2 = m2.predict(n_periods = 12)
temp2 = pd.concat([temp1, df2])

m3 = auto_arima(temp2, stepwise = True, error_action='ignore', seasonal=True, m=12)
df3 = m3.predict(n_periods = 12)
temp3 = pd.concat([temp2, df3])

m4 = auto_arima(temp3, stepwise = True, error_action='ignore', seasonal=True, m=12)
df4 = m4.predict(n_periods = 12)
temp4 = pd.concat([temp3, df4])

m5 = auto_arima(temp4, stepwise = True, error_action='ignore', seasonal=True, m=12)
df5 = m5.predict(n_periods = 12)
temp5 = pd.concat([temp4, df5])

print(len(temp5))

x_axis = np.arange(340)
plt.plot(x_axis, temp5)

full_path = '/content/27707.pkl'

with open(full_path, 'wb') as file:
  pickle.dump(m5, file)

"""**27705**"""

m1 = auto_arima(temp_27705, stepwise = True, error_action='ignore', seasonal=True, m=12)
df1 = m1.predict(n_periods = 12)
temp1 = pd.concat([temp_27705, df1])


m2 = auto_arima(temp1, stepwise = True, error_action='ignore', seasonal=True, m=12)
df2 = m2.predict(n_periods = 12)
temp2 = pd.concat([temp1, df2])

m3 = auto_arima(temp2, stepwise = True, error_action='ignore', seasonal=True, m=12)
df3 = m3.predict(n_periods = 12)
temp3 = pd.concat([temp2, df3])

m4 = auto_arima(temp3, stepwise = True, error_action='ignore', seasonal=True, m=12)
df4 = m4.predict(n_periods = 12)
temp4 = pd.concat([temp3, df4])

m5 = auto_arima(temp4, stepwise = True, error_action='ignore', seasonal=True, m=12)
df5 = m5.predict(n_periods = 12)
temp5 = pd.concat([temp4, df5])

print(len(temp5))

x_axis = np.arange(340)
plt.plot(x_axis, temp5)

full_path = '/content/27705.pkl'

with open(full_path, 'wb') as file:
  pickle.dump(m5, file)

"""**27701**"""

m1 = auto_arima(temp_27701, stepwise = True, error_action='ignore', seasonal=True, m=12)
df1 = m1.predict(n_periods = 12)
temp1 = pd.concat([temp_27701, df1])

m2 = auto_arima(temp1, stepwise = True, error_action='ignore', seasonal=True, m=12)
df2 = m2.predict(n_periods = 12)
temp2 = pd.concat([temp1, df2])

m3 = auto_arima(temp2, stepwise = True, error_action='ignore', seasonal=True, m=12)
df3 = m3.predict(n_periods = 12)
temp3 = pd.concat([temp2, df3])

m4 = auto_arima(temp3, stepwise = True, error_action='ignore', seasonal=True, m=12)
df4 = m4.predict(n_periods = 12)
temp4 = pd.concat([temp3, df4])

m5 = auto_arima(temp4, stepwise = True, error_action='ignore', seasonal=True, m=12)
df5 = m5.predict(n_periods = 12)
temp5 = pd.concat([temp4, df5])

print(len(temp5))

x_axis = np.arange(340)
plt.plot(x_axis, temp5)

full_path = '/content/27701.pkl'

with open(full_path, 'wb') as file:
  pickle.dump(m5, file)

"""**27712**"""

m1 = auto_arima(temp_27712, stepwise = True, error_action='ignore', seasonal=True, m=12)
df1 = m1.predict(n_periods = 12)
temp1 = pd.concat([temp_27712, df1])

m2 = auto_arima(temp1, stepwise = True, error_action='ignore', seasonal=True, m=12)
df2 = m2.predict(n_periods = 12)
temp2 = pd.concat([temp1, df2])

m3 = auto_arima(temp2, stepwise = True, error_action='ignore', seasonal=True, m=12)
df3 = m3.predict(n_periods = 12)
temp3 = pd.concat([temp2, df3])

m4 = auto_arima(temp3, stepwise = True, error_action='ignore', seasonal=True, m=12)
df4 = m4.predict(n_periods = 12)
temp4 = pd.concat([temp3, df4])

m5 = auto_arima(temp4, stepwise = True, error_action='ignore', seasonal=True, m=12)
df5 = m5.predict(n_periods = 12)
temp5 = pd.concat([temp4, df5])

print(len(temp5))

x_axis = np.arange(340)
plt.plot(x_axis, temp5)

full_path = '/content/27712.pkl'

with open(full_path, 'wb') as file:
  pickle.dump(m5, file)

"""**27503**"""

m1 = auto_arima(temp_27503, stepwise = True, error_action='ignore', seasonal=True, m=12)
df1 = m1.predict(n_periods = 12)
temp1 = pd.concat([temp_27503, df1])

m2 = auto_arima(temp1, stepwise = True, error_action='ignore', seasonal=True, m=12)
df2 = m2.predict(n_periods = 12)
temp2 = pd.concat([temp1, df2])

m3 = auto_arima(temp2, stepwise = True, error_action='ignore', seasonal=True, m=12)
df3 = m3.predict(n_periods = 12)
temp3 = pd.concat([temp2, df3])

m4 = auto_arima(temp3, stepwise = True, error_action='ignore', seasonal=True, m=12)
df4 = m4.predict(n_periods = 12)
temp4 = pd.concat([temp3, df4])

m5 = auto_arima(temp4, stepwise = True, error_action='ignore', seasonal=True, m=12)
df5 = m5.predict(n_periods = 12)
temp5 = pd.concat([temp4, df5])

print(len(temp5))

x_axis = np.arange(340)
plt.plot(x_axis, temp5)

full_path = '/content/27503.pkl'

with open(full_path, 'wb') as file:
  pickle.dump(m5, file)

"""**27713**"""

temp_27713 = temp_27713.fillna(291426.129658396)
m1 = auto_arima(temp_27713, stepwise = True, error_action='ignore', seasonal=True, m=12)
df1 = m1.predict(n_periods = 12)
temp1 = pd.concat([temp_27713, df1])

m2 = auto_arima(temp1, stepwise = True, error_action='ignore', seasonal=True, m=12)
df2 = m2.predict(n_periods = 12)
temp2 = pd.concat([temp1, df2])

m3 = auto_arima(temp2, stepwise = True, error_action='ignore', seasonal=True, m=12)
df3 = m3.predict(n_periods = 12)
temp3 = pd.concat([temp2, df3])

m4 = auto_arima(temp3, stepwise = True, error_action='ignore', seasonal=True, m=12)
df4 = m4.predict(n_periods = 12)
temp4 = pd.concat([temp3, df4])

m5 = auto_arima(temp4, stepwise = True, error_action='ignore', seasonal=True, m=12)
df5 = m5.predict(n_periods = 12)
temp5 = pd.concat([temp4, df5])

print(len(temp5))

x_axis = np.arange(340)
plt.plot(x_axis, temp5)

full_path = '/content/27713.pkl'

with open(full_path, 'wb') as file:
  pickle.dump(m5, file)

"""**Predicted Prices**"""

import numpy as np
import matplotlib.pyplot as plt
#print(model.feature_importances_)
def project(data):
  arr = []
  for i in range(2020, 2025): #generate new numpy array to run predictions on
    data['YEAR'] = i
    for j in range(1, 13):
      data['MONTH'] = j
      arr.append(model.predict(data)[0])
  return arr

arr = project(df)

print(arr)

"""Create a csv file"""

dates = []
for i in range(0, 5):
  for j in range(1, 13):
    dt_object = datetime.datetime(2020+i, j, 1)
    dates.append(dt_object.strftime("%Y-%m-%d"))


data = {'DATE':dates, 'PRICE': arr}
df = pd.DataFrame(data)
df.tail(20)

"""Arima Model"""

pip install -q condacolab

import condacolab
condacolab.install()

!conda install -c conda-forge pmdarima -y

#use autoarima

from pmdarima.arima import auto_arima

import sklearn
from sklearn.model_selection import train_test_split
import numpy as np
#x_axis = np.arange(60)
#plt.plot(x_axis, df['PRICE'])

m1 = auto_arima(df['PRICE'], stepwise = True, error_action='ignore', seasonal=True, m=12)
df_2 = m1.predict(n_periods = 60)

temp = pd.concat([df['PRICE'], df_2])
arr = np.arange(120)
plt.plot(arr, temp)

"""**Time Predictions Scaling (next 5 years)**

**27703**
"""

import pickle
time_model = pickle.load(open('/content/27703.pkl', 'rb'))

model = pickle.load(open('/content/sample_data/model.pkl', 'rb'))

single_prediction = model.predict(df)[0]
print(single_prediction)

temp = []
prediction = time_model.predict(n_periods = 61)

temp.append(prediction.iloc[0])
temp.append(prediction[12])
temp.append(prediction[24])
temp.append(prediction[36])
temp.append(prediction[48])
temp.append(prediction[60])



ans = single_prediction
for i in range(0, 5):
  ans.append((1 + (temp[i+1] - temp[i])/temp[i]) * ans[i])